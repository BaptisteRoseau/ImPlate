#include "utils.h"
#include "blur.h"
#include "options.h"
#include "gopt/gopt.h"
#include "config.h"

#include <opencv4/opencv2/opencv.hpp>
#include <opencv4/opencv2/core/mat.hpp>
#include <alpr.h> 

//TODO: "bouton "Automatique""
//TODO: option "Always try autoblur"
//TODO: Display error messages on screen

#include <filesystem>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/io.h>
#include <cstdio>
#include <cstdlib>
#include <unistd.h>
#include <iostream>
#include <fstream>
#include <cstring>
#include <stack>
#include <limits.h>
#include <gtk/gtk.h>

using namespace std;
using namespace cv;
using namespace alpr;

namespace fs = filesystem;

#define BUFFSIZE 200

bool verbose; /// Whether or not information should be displayed
bool save_log; /// Whether or not logs should be saved (default: false)
ofstream log_ostream; /// Stream to the file where the logs will be saved

// Used by CallBackFunc
bool finished = false;
Mat ori, img;
vector<Point> vertices;
vector<vector<Point> > corners;

void draw_lines(){
    img = ori.clone();
    img.at<Vec3b>(vertices[0].x,vertices[0].y) = Vec3b(255,0,0);
    size_t vsize = vertices.size();
    size_t i;
    for (i = 1; i < vsize; i++){
        line(img, vertices[i-1], vertices[i], Scalar(0,0,0));
    }
    if (!vertices.empty() && vsize % 4 == 0){
        line(img, vertices[0], vertices[vsize-1], Scalar(0,0,0));
    }
}

void CallBackFunc(int event, int x, int y, int flags, void* userdata){
	(void) flags;
	(void) userdata;
   if(event == EVENT_RBUTTONDOWN){
        DISPLAY("Right mouse button clicked at (" << x << ", " << y << ")");
        if (!vertices.empty()){
            vertices.pop_back();
        }
        draw_lines();
        return;
   }
   if(event == EVENT_LBUTTONDOWN){
        DISPLAY("Left mouse button clicked at (" << x << ", " << y << ")");
        vertices.push_back(Point(x,y));
        draw_lines();
        if (!vertices.empty() && vertices.size() % 4 == 0){
            corners.push_back(vertices);
            vertices.clear();
            finished = true;
        }
        return;
   }
}

/**
 * @brief Retireves the plate(s) corners and number from results to corners and numbers
 * 
 * @param results the returned value of the alpr process
 * @param corners a buffer where to write corners (from top-left following the chonological order)
 * @param numbers a buffer where to write the detected plates
 */
void plate_corners(const vector<AlprPlateResult> &results,
				 vector<vector<Point> > &corners,
				 vector<string> &numbers){
	size_t i, j;
	vector<Point> tmp_vect;
	Point tmp_pt;
	for (i = 0; i < results.size(); i++){
		for (j = 0; j < 4; j++){
			tmp_pt.x = results[i].plate_points[j].x;
			tmp_pt.y = results[i].plate_points[j].y;
			tmp_vect.push_back(tmp_pt);
		}
		corners.push_back(tmp_vect); 
		numbers.push_back(results[i].bestPlate.characters);
		tmp_vect.clear();
	}
}

int process(const char* in_path, const char* out_path,
			const char *output_name_addon,
			const double timeout,
			const unsigned int blur_filter_size,
			const bool respect_input_path,
			const char *log_file,
			const char *country,
			const bool save_plate_info,
			const char *plate_info_save_path,
			const bool blur_only,
			const char *blur_only_location,
			const bool replace_input_file){
    
	// Retrieving picture file paths into stack_files
	stack<string> *stack_files_prev = new stack<string>();
	stack<string> *stack_files = list_files(in_path);
	if (stack_files == nullptr){
		//Don't use DISPLAY_ERR 
		// you want to see this message even without verbose
		cerr << "\033[1;31mERROR:\033[0m Couldn't open any file.\n";
		exit(EXIT_FAILURE);
	}

	// Opening log file if necessary
	if (save_log){
		log_ostream.open(log_file);
		if (!log_ostream){
			cerr << "\033[1;31mERROR:\033[0m Couldn't open " << log_file << endl;
			exit(EXIT_FAILURE);
		}
	}

	// Building output directory if it doesn't exists, and if input is a directory
	if (!fs::directory_entry(in_path).is_regular_file()){
		if (!build_dir(out_path)){
			cerr << "\033[1;31mERROR:\033[0m Couldn't build output directory.\n";
			exit(EXIT_FAILURE);
		}
	}

	// Parameters initialisation
	stack<string> success_pictures = stack<string>();
	stack<string> failed_pictures = stack<string>();
	Mat picture = Mat();
	Mat blurred  = Mat();
	string filepath, filename, fileext, savedir, file_out_path;
	int error;
	unsigned int loop_idx = 0;
	unsigned int nb_files = stack_files->size();
	double _timeout = timeout == 0 ? DBL_MAX : timeout; 
	double t0 = time(nullptr);
	//const vector country_code_vect = {"eu", "fr", "gb", "us", "au", "br", "in"};

	// If using alpr
	bool autoblur = false;
	vector<string> numbers;
	Alpr *detector = nullptr;
	AlprResults alpr_results;

    while (!stack_files->empty()){
		// Reseting autoblur
		autoblur = false;

        // Reseting global variables
        destroyAllWindows();
        finished=false;
        vertices.clear();
        corners.clear();

        // Getting file path informations
		copy_top(stack_files, stack_files_prev);
		filepath = stack_next(stack_files);
		filename = get_filename(filepath);
		fileext  = get_file_extension(filepath);
		loop_idx++;

		// Displaying script advancement
		DISPLAY("\nPicture: " << loop_idx << " out of " << nb_files
			 << " (" << (float) 100*loop_idx/nb_files << " %) : " << filename)

		// Opening picture
		picture = open_picture(filepath);
		if (picture.empty()){
			DISPLAY_ERR("Couldn't open " << filepath);
			failed_pictures.push(filepath);
			continue;
		}

        //======================= MAIN DISPLAY FOR THIS PICTURE
//~~ MODIFICATION FROM GERE
        // Read image from file 
        ori = imread(filepath);

        // Check it loaded
        if(ori.empty()){ 
            DISPLAY_ERR("Couldn't load " << filepath)
            continue;
        }

        // Copying original image into buffer image
        img = ori.clone();

        //Create a window
        namedWindow("ImageDisplay", 1);

        // Register a mouse callback
        setMouseCallback("ImageDisplay", CallBackFunc, nullptr);

        // Main loop
        //(TODO: 1 loop pour blur plusieurs zones)

        // Bluring loop
        while(!finished && !autoblur){
            imshow("ImageDisplay", img);
            waitKey(50);
        }


		if (autoblur){
			//TODO: better management of RAM
			// Cleaning previous detector
			if (!detector) { delete detector; }

			// Buffers to get ALPR results
			numbers = vector<string>();;
			detector = new Alpr(country, DFLT_CONFIG_FILE, DFLT_RUNTIME_DIR);

			if (!blur_only){
				// Getting picture's plate informations
				alpr_results = detector->recognize(filepath);
				vector<AlprPlateResult> results = alpr_results.plates;
				plate_corners(results, corners, numbers);
				if (corners.size() == 0){
					DISPLAY_ERR("No plate detected on " << filename);
					failed_pictures.push(filepath);
					continue;
				}
				
				// Displaying the plates numbers
				if (verbose || save_log){
					DISPLAY("Plates detected:")
					for (auto&& num: numbers){
						DISPLAY(num);
					}
				}
			} else {
				// Parsing corners and verifying validity
				corners = parse_location(blur_only_location);
				for (auto&& cor: corners){
					for (auto&& pt: cor){
						if (pt.x < 0 || pt.y < 0 || pt.x > picture.cols || pt.y > picture.rows){
							cerr << "\033[1;31mERROR:\033[0m Invalid pixel location: " << blur_only_location
							<< "\nPlease respect format x11_y11_x12_y12_x13_y13_x14_y14_x21_y21.. with valid values." << endl;
							exit(EXIT_FAILURE);
						}
					}
					sort_corners(cor);
				}
			}
		}

        // Bluring a copy of the initial picture DO NOT TOUCH
        blurred = picture.clone();
        error = 0;
        for (auto&& corn: corners){
            error += _max(blur(picture, blurred, corn, blur_filter_size), error);
        }
        if (error){
            DISPLAY_ERR("Couldn't blur" << error << " times out of " << corners.size() << " on " << filename);
            failed_pictures.push(filepath);
            continue;
        }

        // Show results
        destroyAllWindows();
        namedWindow("Result", 1);
        imshow("Result", blurred);
        waitKey(3000);

//~~ TO HERE
        //======================= END MAIN DISPLAY

		//TODO: Factorize "replace_input_file" option
		// If input is a file, output will be directly out_path, not a directory
		if (fs::directory_entry(in_path).is_regular_file()){
			if (build_directories(out_path)){
				if (fs::path(out_path).has_extension()){
					if (replace_input_file){
						// Replacing input file if "--rename" option
						fs::rename(filepath, out_path);
						savedir = (string) fs::path(out_path).parent_path(); //Used for save-info
						save_picture(blurred, filepath);
					} else {
						// Saving file as in given
						savedir = (string) fs::path(out_path).parent_path();
						save_picture(blurred, out_path);
					}
				} else {
					if (replace_input_file){
						// Replacing input file if "--rename" option
						fs::rename(filepath, (string)out_path+"/"+filename+output_name_addon+fileext);
						savedir = (string) out_path; //Used for save-info
						save_picture(blurred, filepath);
					} else {
						// Saving file into the directory given
						savedir = out_path;
						save_picture(blurred, out_path, filename+output_name_addon+fileext);
					}
				}
			} else {
				continue;
			}
		// If input is a directory, 
		} else {
			// Selecting output directory and building requiered directories
			savedir = select_output_dir(out_path, in_path, filepath, respect_input_path);
			if (!build_directories(savedir)){
				DISPLAY_ERR("Couldn't build directories for " << savedir);
				failed_pictures.push(filepath);
				continue;
			}
			if (replace_input_file){
				// Replacing input file
				fs::rename(filepath, savedir+"/"+filename+output_name_addon+fileext);
				save_picture(blurred, filepath);
			} else {
				// Writing blurred picture into the directory
				save_picture(blurred, savedir, filename+output_name_addon+fileext);
			}
		}

		// Picture was successfully saved
		success_pictures.push(filepath);

		// Saving the plate information if necessary
		if (autoblur && !blur_only && save_plate_info && !numbers.empty()){
			string plate_file = savedir+"/"+filename+DFLT_JSON_ADDON+".json";
			// If -s option has a path given, behavior is the same as above
			if (fs::directory_entry(in_path).is_regular_file() && plate_info_save_path != nullptr){
				if (build_directories(plate_info_save_path)){
					if (fs::path(plate_info_save_path).has_extension()){
						plate_file = plate_info_save_path;
					} else {
						plate_file = ((string) plate_info_save_path)+"/"+filename+DFLT_JSON_ADDON+".json";
					}
				}
			}
			ofstream plate_ostream;
			plate_ostream.open(plate_file);
			if (!plate_ostream){
				DISPLAY_ERR("Couldn't open " << plate_file);
			} else {
				plate_ostream << detector->toJson(alpr_results);
				DISPLAY("Wrote plate info " << plate_file)
			}
			plate_ostream.close();
		}
		
		// Cleaning memory and exiting program if _timeout is reached
		if (difftime(time(nullptr), t0) > _timeout){			
			delete stack_files;
			DISPLAY("Timeout reached.");
			return EXIT_SUCCESS;
		}
		
	}

	// Displaying success pictures
	if ((verbose || save_log) && !success_pictures.empty()){
		DISPLAY("\nPictures successfully blurred:")

		// Opening file containing success pictures only
		ofstream successpic_stream;
		successpic_stream.open(DFLT_SUCCESS_PIC_FILE);
		if (!successpic_stream){
			DISPLAY_ERR("Couldn't open " << DFLT_SUCCESS_PIC_FILE)
		}

		// Displaying and writing success pictures path
		while (!success_pictures.empty()){
			DISPLAY(success_pictures.top());
			successpic_stream << success_pictures.top() << endl;
			success_pictures.pop();
		}
	}

	DISPLAY("\nExited successfully (" << difftime(time(nullptr), t0) << " seconds). ");

	// Cleaning memory
	delete stack_files;

	return EXIT_SUCCESS;
}

//===========================================================================================

void usage(char* name){
	cout <<"\
Usage: " << name << " -i <path to picture or directory>\
-o <output directory>\n\
Type -h or --help for more details.\n";
}

int main(int argc, char** argv){
    if (argc == 1){
		usage(argv[0]);
		return -1;
	}

	// Global variable initialization
	save_log = false;
	verbose  = false;

	// Argument declaration and defaul value
	char* in_path = new char[BUFFSIZE];
	char* out_path = new char[BUFFSIZE];
	char *output_name_addon = new char[BUFFSIZE];
	strcpy(output_name_addon, DFLT_OUTPUT_ADDON);
	double timeout = 0;
	unsigned int blur_filter_size = DFLT_BLUR;
	bool respect_input_path = false;
	char *log_file = new char[BUFFSIZE];
	char *country = new char[BUFFSIZE];
	strcpy(country, DFLT_COUNTRY);
	bool save_plate_info = false;
	char *plate_info_save_path = nullptr; // Dynamically allocated if argument provided
	bool blur_only = false;
	char *blur_only_location = new char[BUFFSIZE];
	bool replace_input_file = false;

	// Parsing command line
	parse_argv(argv, in_path, out_path,
			   output_name_addon,
			   timeout,
			   blur_filter_size,
			   verbose,
			   respect_input_path,
			   save_log,
			   log_file,
			   country,
			   save_plate_info,
			   plate_info_save_path,
			   blur_only,
			   blur_only_location,
			   replace_input_file);

	// Executing main process
	int ret = process(in_path, out_path,
					  output_name_addon,
					  timeout,
					  blur_filter_size,
					  respect_input_path,
					  log_file,
					  country,
					  save_plate_info,
					  plate_info_save_path,
					  blur_only,
					  blur_only_location,
					  replace_input_file);

	delete[] in_path;
	delete[] out_path;
	delete[] log_file;
	delete[] output_name_addon;
	delete[] country;
	delete[] blur_only_location;
	if (plate_info_save_path != nullptr) delete[] plate_info_save_path;

    return ret;
}
